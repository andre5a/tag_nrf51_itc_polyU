/* Copyright (c) 2012 Nordic Semiconductor. All Rights Reserved.
 *
 * The information contained herein is property of Nordic Semiconductor ASA.
 * Terms and conditions of usage are described in detail in NORDIC
 * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
 *
 * Licensees are granted free, non-transferable use of the information. NO
 * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
 * the file.
 *
 */

/** @file
 *
 * @defgroup ble_sdk_srv_ias Beep Service
 * @{
 * @ingroup ble_sdk_srv
 * @brief Beep Service module.
 *
 * @details This module implements the Beep Service with the Alert Level characteristic.
 *          During initialization it adds the Beep Service and Alert Level characteristic
 *          to the BLE stack database.
 *
 *          The application must supply an event handler for receiving Beep Service 
 *          events. Using this handler, the service will notify the application when the 
 *          Alert Level characteristic value changes.
 *
 *          The service also provides a function for letting the application poll the current
 *          value of the Alert Level characteristic.
 *
 * @note The application must propagate BLE stack events to the Beep Service
 *       module by calling ble_beep_on_ble_evt() from the @ref ble_stack_handler callback.
 */

#ifndef BLE_CONTROLLER_SERV_H__
#define BLE_CONTROLLER_SERV_H__

#include "ble.h"
#include "ble_srv_common.h"
#include "nrf_soc.h"

//#define AUTHENTICATION_LEN			16



#define ITC_VENDOR_UUID_INDEX 0

//UUID Generated by http://www.itu.int/ITU-T/asn1/cgi-bin/uuid_generate - 920efcc0-e117-11e3-a1b0-0002a5d5c51b
#define ITC_UUID_BASE {0x1B, 0xC5, 0xD5, 0xA5, 0x02, 0x00, 0xB0, 0xA1, 0xE3, 0x11, 0x17, 0xE1, 0xC0, 0xFC, 0x0E, 0x92}



/**@brief 128-bit UUID base List. */

static const ble_uuid128_t m_base_uuid128 =
{
   ITC_UUID_BASE
};

// 128-bit UUID BASE
#define UUID_SERV_CONTROLLER				0x1600													/**< Proprietary UUID for local service. */
#define UUID_CHAR_PWM1	 					0x1601
#define UUID_CHAR_PWM2					 	0x1602														/**< Proprietary UUID for local characteristic. */
#define UUID_CHAR_PWM3		 				0x1603
#define UUID_CHAR_PWM4						0x1604


/**@brief Beep Service event type. */
typedef enum
{
		/**< Beep Updated events. */
		PWM1_VAL=0,
		PWM2_VAL=1,
		PWM3_VAL=2,
		PWM4_VAL=3,

} ble_controller_evt_type_t;

/**@brief Beep Service event. */
typedef struct
{
    ble_controller_evt_type_t evt_type;                        /**< Type of event. */
	uint8_t	pwm1_val;
	uint8_t	pwm2_val;
	uint8_t pwm3_val;
	uint8_t pwm4_val;		//mass production re-arm
} ble_controller_evt_t;

// Forward declaration of the ble_beep_t type. 
typedef struct ble_beep_s ble_controller_t;

/**@brief Beep Service event handler type. */
typedef void (*ble_controller_evt_handler_t) (ble_controller_t * p_beep, ble_controller_evt_t * p_evt);

/**@brief Beep Service init structure. This contains all options and data needed for
 *        initialization of the service. */
typedef struct
{
    ble_controller_evt_handler_t        	evt_handler;                    /**< Event handler to be called for handling events in the Battery Service. */
    bool                          	support_notification;           /**< TRUE if notification of Battery Level measurement is supported. */
    ble_srv_report_ref_t *        	p_report_ref;                   /**< If not NULL, a Report Reference descriptor with the specified value will be added to the Battery Level characteristic */

} ble_controller_init_t;

/**@brief Beep Service structure. This contains various status information for the
 *        service. */
typedef struct ble_beep_s
{
    ble_controller_evt_handler_t   	evt_handler;              /**< Event handler to be called for handling events in the Beep Service. */
    uint16_t                 	service_handle;           /**< Handle of Beep Service (as provided by the BLE stack). */
	bool                      	is_notification_supported;      /**< TRUE if notification of Battery Level is supported. */
	uint16_t                  	conn_handle;                    /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
	ble_gatts_char_handles_t  	controller_pwm1_handles;
	ble_gatts_char_handles_t  	controller_pwm2_handles;
	ble_gatts_char_handles_t  	controller_pwm3_handles;      /**< Handles related to the State characteristic. */
	ble_gatts_char_handles_t  	controller_pwm4_handles;      /**< Handles related to the State characteristic. */

} ble_controller_t;

extern ble_controller_t    m_controller;                                           /**< Structure used to identify the Beeps service. */





/**@brief Function for initializing the Beep Service.
 *
 * @param[out]  p_beep       Beep Service structure. This structure will have to be
 *                          supplied by the application. It will be initialized by this function,
 *                          and will later be used to identify this particular service instance.
 * @param[in]   p_beep_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_controller_serv_init(ble_controller_t * p_beep, const ble_controller_init_t * p_beep_init);

/**@brief Function for handling the Application's BLE Stack events.
 *
 * @details Handles all events from the BLE stack of interest to the Beep Service.
 *
 * @param[in]   p_beep      Beep Service structure.
 * @param[in]   p_ble_evt  Event received from the BLE stack.
 */
void ble_controller_on_ble_evt(ble_controller_t * p_beep, ble_evt_t * p_ble_evt);





#endif // BLE_BEEP_H__

/** @} */
