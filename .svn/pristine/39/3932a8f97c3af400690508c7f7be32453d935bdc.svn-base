/* Copyright (c) 2012 Nordic Semiconductor. All Rights Reserved.
 *
 * The information contained herein is property of Nordic Semiconductor ASA.
 * Terms and conditions of usage are described in detail in NORDIC
 * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
 *
 * Licensees are granted free, non-transferable use of the information. NO
 * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
 * the file.
 *
 */

/** @file
 *
 * @defgroup ble_sdk_srv_ias Beep Service
 * @{
 * @ingroup ble_sdk_srv
 * @brief Beep Service module.
 *
 * @details This module implements the Beep Service with the Alert Level characteristic.
 *          During initialization it adds the Beep Service and Alert Level characteristic
 *          to the BLE stack database.
 *
 *          The application must supply an event handler for receiving Beep Service 
 *          events. Using this handler, the service will notify the application when the 
 *          Alert Level characteristic value changes.
 *
 *          The service also provides a function for letting the application poll the current
 *          value of the Alert Level characteristic.
 *
 * @note The application must propagate BLE stack events to the Beep Service
 *       module by calling ble_beep_on_ble_evt() from the @ref ble_stack_handler callback.
 */

#ifndef BLE_BEEP_H__
#define BLE_BEEP_H__

#include "ble.h"
#include "ble_srv_common.h"
#include "nrf_soc.h"

//#define AUTHENTICATION_LEN			16



#define LAPA_VENDOR_UUID_INDEX 0

//UUID Generated by http://www.itu.int/ITU-T/asn1/cgi-bin/uuid_generate - 920efcc0-e117-11e3-a1b0-0002a5d5c51b
#define LAPA_UUID_BASE {0x1B, 0xC5, 0xD5, 0xA5, 0x02, 0x00, 0xB0, 0xA1, 0xE3, 0x11, 0x17, 0xE1, 0xC0, 0xFC, 0x0E, 0x92}



/**@brief 128-bit UUID base List. */

static const ble_uuid128_t m_base_uuid128 =
{
   LAPA_UUID_BASE
};

// 128-bit UUID BASE
#define UUID_SERV_BEEP	 					0x1600													/**< Proprietary UUID for local service. */
#define UUID_CHAR_SAFETYMODE	 			0x1521
#define UUID_CHAR_AUTHENTICATION		 	0x1522														/**< Proprietary UUID for local characteristic. */
#define UUID_CHAR_RSSI		 				0x1523
#define UUID_CHAR_BATTERY_VOLT		 		0x1525														/**< Proprietary UUID for local characteristic. */
#define UUID_CHAR_BUTTON			 		0x1527														/**< Proprietary UUID for local characteristic. */
#define UUID_CHAR_INPUT						0x1520 //0x1530	//Alterado a 19-11-2015 a pedido do Luis

/**@brief Beep Service event type. */
typedef enum
{
		/**< Beep Updated events. */
		CHAR_SND_OFF_LED_OFF=0,
		CHAR_SND_ON_LED_ON=1,
		CHAR_SND_ON_LED_OFF=2,
		CHAR_SND_OFF_LED_ON=3,
		CHAR_SAFETY_ON_SND_ON_FAR=4,
		CHAR_SAFETY_ON_SND_OFF_FAR=5,
		CHAR_SAFETY_OFF=6,
		CHAR_AUTHENTICATION=7,
		CHAR_NULL=8,
		CHAR_RSSI_NOTIF_ON=9,                             /**< Battery value notification enabled event. */
		CHAR_RSSI_NOTIF_OFF=10,                            /**< Battery value notification disabled event. */
		CHAR_BUTTON_NOTIF_ON=11,                             /**< Battery value notification enabled event. */
		CHAR_BUTTON_NOTIF_OFF=12,                            /**< Battery value notification disabled event. */
		CHAR_STATE=13,
		CHAR_PWR_OFF=14,
		CHAR_BATTERY_LEVEL=15,
		CHAR_DISCONNECT=16,
		CHAR_ADV2_CONFIG=17,
		CHAR_SAFETY_ON_SND_ON_NEAR=18,
		CHAR_SAFETY_ON_SND_OFF_NEAR=19,

} ble_beep_evt_type_t;

/**@brief Beep Service event. */
typedef struct
{
    ble_beep_evt_type_t evt_type;                        /**< Type of event. */
	char authentication_word[SOC_ECB_CIPHERTEXT_LENGTH];
	uint8_t safety_mode_tx_power;
	int8_t safety_threshold_alarm;
	uint8_t	nr_repetitions;
	uint8_t	buzzer_ring;
	uint8_t lapa_state;
	uint8_t lapa_poff;		//mass production re-arm

	uint8_t input[3];		//global char input
} ble_beep_evt_t;

// Forward declaration of the ble_beep_t type. 
typedef struct ble_beep_s ble_beep_t;

/**@brief Beep Service event handler type. */
typedef void (*ble_beep_evt_handler_t) (ble_beep_t * p_beep, ble_beep_evt_t * p_evt);

/**@brief Beep Service init structure. This contains all options and data needed for
 *        initialization of the service. */
typedef struct
{
    ble_beep_evt_handler_t        	evt_handler;                    /**< Event handler to be called for handling events in the Battery Service. */
    bool                          	support_notification;           /**< TRUE if notification of Battery Level measurement is supported. */
    ble_srv_report_ref_t *        	p_report_ref;                   /**< If not NULL, a Report Reference descriptor with the specified value will be added to the Battery Level characteristic */
    ble_srv_cccd_security_mode_t  	rssi_char_attr_md;     /**< Initial security level for battery characteristics attribute */
    ble_srv_cccd_security_mode_t  	button_char_attr_md;     /**< Initial security level for battery characteristics attribute */
    ble_srv_cccd_security_mode_t  	tstamp_char_attr_md;     /**< Initial security level for battery characteristics attribute */

	ble_gap_conn_sec_mode_t       	rssi_report_read_perm; /**< Initial security level for battery report read attribute */
	ble_gap_conn_sec_mode_t       	button_report_read_perm; /**< Initial security level for battery report read attribute */
	ble_gap_conn_sec_mode_t       	tstamp_report_read_perm; /**< Initial security level for battery report read attribute */

	int8_t                    		initial_tx_power_level;   		/**< Initial value of the TX Power Level characteristic (in dBm). */
	uint16_t                      	initial_batt_level;             /**< Initial battery level */
    uint16_t                      	initial_rssi;             /**< Initial battery level */
    uint16_t                      	initial_button_level;             /**< Initial battery level */
    uint16_t                      	initial_tstamp;             /**< Initial battery level */
	uint8_t      	             	initial_lapa_state;   		/**< Initial value of the Lapa State characteristic. */
	uint8_t							initial_lapa_poff;   		/**< Initial value of the Lapa POFF characteristic. */

	uint8_t							initial_input;

} ble_beep_init_t;

/**@brief Beep Service structure. This contains various status information for the
 *        service. */
typedef struct ble_beep_s
{
    ble_beep_evt_handler_t   	evt_handler;              /**< Event handler to be called for handling events in the Beep Service. */
    uint16_t                 	service_handle;           /**< Handle of Beep Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t	beep_beep_handles;        /**< Handles related to the Beep characteristic. */
	ble_gatts_char_handles_t	beep_safety_mode_handles;
	ble_gatts_char_handles_t  	beep_verify_authentication_handles;
	ble_gatts_char_handles_t  	beep_rssi_handles;
	//ble_gatts_char_handles_t  	beep_tstamp_handles;

	uint16_t                  	report_ref_handle;              /**< Handle of the Report Reference descriptor. */
	bool                      	is_notification_supported;      /**< TRUE if notification of Battery Level is supported. */
    int8_t                    	rssi_last;             		/**< Last Battery Level measurement passed to the Battery Service. */
    int8_t                    	button_last;             		/**< Last Battery Level measurement passed to the Battery Service. */
    int8_t                    	tstamp_last;             		/**< Last Battery Level measurement passed to the Battery Service. */

	uint16_t                  	conn_handle;                    /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
	ble_gatts_char_handles_t  	beep_lapa_state_handles;      /**< Handles related to the State characteristic. */
	ble_gatts_char_handles_t  	battery_level_handles;        /**< Handles related to the Battery Level characteristic. */
	ble_gatts_char_handles_t  	button_level_handles;        /**< Handles related to the Button Level characteristic. */
	ble_gatts_char_handles_t  	beep_disconnect_handles;      /**< Handles related to the State characteristic. */
	ble_gatts_char_handles_t  	beep_lapa_poff_handles;      /**< Handles related to the State characteristic. */

	
	ble_gatts_char_handles_t  	beep_input_handles;      /**< Handles related to the State characteristic. */
	ble_gatts_char_handles_t  	beep_safetymode_handles;      /**< Handles related to the State characteristic. */

} ble_beep_t;

extern ble_beep_t    m_beep;                                           /**< Structure used to identify the Beeps service. */

/**@brief Function for initializing the Beep Service.
 *
 * @param[out]  p_beep       Beep Service structure. This structure will have to be
 *                          supplied by the application. It will be initialized by this function,
 *                          and will later be used to identify this particular service instance.
 * @param[in]   p_beep_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_beep_init(ble_beep_t * p_beep, const ble_beep_init_t * p_beep_init);

/**@brief Function for handling the Application's BLE Stack events.
 *
 * @details Handles all events from the BLE stack of interest to the Beep Service.
 *
 * @param[in]   p_beep      Beep Service structure.
 * @param[in]   p_ble_evt  Event received from the BLE stack.
 */
void ble_beep_on_ble_evt(ble_beep_t * p_beep, ble_evt_t * p_ble_evt);

uint32_t ble_rssi_update(ble_beep_t * p_beep, int8_t rssi);

uint32_t ble_bas_battery_level_update(ble_beep_t * p_bas, uint16_t battery_level);

//uint32_t ble_tstamp_update(ble_beep_t * p_beep, int8_t tstamp);


/**@brief Function for updating the battery level.
 *
 * @details The application calls this function after having performed a battery measurement. If
 *          notification has been enabled, the battery level characteristic is sent to the client.
 *
 * @note For the requirements in the BAS specification to be fulfilled,
 *       this function must be called upon reconnection if the battery level has changed
 *       while the service has been disconnected from a bonded client.
 *
 * @param[in]   p_bas          Battery Service structure.
 * @param[in]   battery_level  New battery measurement value (in percent of full capacity).
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */

uint32_t ble_beep_lapa_state_set(ble_beep_t * p_beep, uint8_t state);

uint32_t ble_button_level_update(ble_beep_t * p_beep, uint8_t button_level);

#endif // BLE_BEEP_H__

/** @} */
