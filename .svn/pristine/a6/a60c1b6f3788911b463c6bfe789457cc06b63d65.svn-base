/* Copyright (c) 2012 Nordic Semiconductor. All Rights Reserved.
 *
 * The information contained herein is property of Nordic Semiconductor ASA.
 * Terms and conditions of usage are described in detail in NORDIC
 * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
 *
 * Licensees are granted free, non-transferable use of the information. NO
 * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
 * the file.
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>
#include "ble_srv_common.h"
#include "nrf_gpio.h"
#include "nordic_common.h"
#include "app_util.h"
#include "nrf_soc.h"
#include "ble_beep.h"

ble_beep_t    m_beep;                                           /**< Structure used to identify the Beeps service. */

static void on_battery_level_write(ble_beep_t * p_settings, ble_gatts_evt_write_t * p_evt_write)
{
   if ((p_evt_write->len == 1) && (p_settings->evt_handler != NULL))
   {
        ble_beep_evt_t evt;			
		evt.evt_type           = CHAR_BATTERY_LEVEL;
        p_settings->evt_handler(p_settings, &evt);   
    }
}



/**@brief Function for handling write events to the Beep value.
 *
 * @param[in]   p_settings    Beep Service structure.
 * @param[in]   p_evt_write   Write event received from the BLE stack.
 */
static void on_beep_input_write(ble_beep_t * p_beep, ble_gatts_evt_write_t * p_evt_write)
{
	ble_beep_evt_t evt;

	if ((p_evt_write->len == 3) && (p_beep->evt_handler != NULL))
   {

    	evt.input[0]=p_evt_write->data[0];
    	evt.input[1]=p_evt_write->data[1];
    	evt.input[2]=p_evt_write->data[2];

		switch (p_evt_write->data[0])
		 {
			 case CHAR_SND_OFF_LED_OFF:
				 evt.evt_type = CHAR_SND_OFF_LED_OFF;
				  break;

			 case CHAR_SND_ON_LED_ON:
				 evt.evt_type = CHAR_SND_ON_LED_ON;
				evt.buzzer_ring= p_evt_write->data[1];
				 evt.nr_repetitions = p_evt_write->data[2];
				 break;

			 case CHAR_SND_ON_LED_OFF:
				 evt.evt_type = CHAR_SND_ON_LED_OFF;
				 evt.buzzer_ring= p_evt_write->data[1];
				 evt.nr_repetitions = p_evt_write->data[2];
				 break;

			 case CHAR_SND_OFF_LED_ON:
				 evt.evt_type = CHAR_SND_OFF_LED_ON;
				 evt.nr_repetitions = p_evt_write->data[2];
				 break;

			 case CHAR_STATE:
				 evt.evt_type = CHAR_STATE;
				 evt.lapa_state = p_evt_write->data[2];
				 break;

			 case CHAR_PWR_OFF:
				evt.evt_type   = CHAR_PWR_OFF;
				break;
			 case CHAR_DISCONNECT:
				evt.evt_type           = CHAR_DISCONNECT;
				break;

			 case CHAR_ADV2_CONFIG:
				evt.evt_type           = CHAR_ADV2_CONFIG;
				break;


			 default:
				 // Illegal Control Point value, ignore
				 evt.evt_type = CHAR_NULL;
				 return;
		 }

	p_beep->evt_handler(p_beep, &evt);
    }

}


/**@brief Function for handling write events to the Beep value.
 *
 * @param[in]   p_settings    Beep Service structure.
 * @param[in]   p_evt_write   Write event received from the BLE stack.
 */
static void on_beep_safetymode_write(ble_beep_t * p_beep, ble_gatts_evt_write_t * p_evt_write)
{
	ble_beep_evt_t evt;

	if ((p_evt_write->len == 2) && (p_beep->evt_handler != NULL))
   {
	 switch (p_evt_write->data[0])
     {


		 case CHAR_SAFETY_OFF:
             evt.evt_type = CHAR_SAFETY_OFF;
             break;
         case CHAR_SAFETY_ON_SND_ON_FAR:
             evt.evt_type = CHAR_SAFETY_ON_SND_ON_FAR;
             evt.safety_mode_tx_power = p_evt_write->data[1];
             break;

         case CHAR_SAFETY_ON_SND_OFF_FAR:
             evt.evt_type = CHAR_SAFETY_ON_SND_OFF_FAR;
             evt.safety_mode_tx_power = p_evt_write->data[1];
             break;

         case CHAR_SAFETY_ON_SND_ON_NEAR:
             evt.evt_type = CHAR_SAFETY_ON_SND_ON_NEAR;
        	 evt.safety_threshold_alarm=p_evt_write->data[1];
             break;

         case CHAR_SAFETY_ON_SND_OFF_NEAR:
             evt.evt_type = CHAR_SAFETY_ON_SND_OFF_NEAR;
        	 evt.safety_threshold_alarm=p_evt_write->data[1];

             break;


         default:
             // Illegal Control Point value, ignore
			 evt.evt_type = CHAR_NULL;
             return;
     }

	p_beep->evt_handler(p_beep, &evt);
    }

}


/**@brief Function for handling write events to the Beep value.
 *
 * @param[in]   p_settings    Beep Service structure.
 * @param[in]   p_evt_write   Write event received from the BLE stack.
 */
static void on_beep_verify_authentication_write(ble_beep_t * p_beep, ble_gatts_evt_write_t * p_evt_write)
{
	  ble_beep_evt_t evt;

	if ((p_evt_write->len == 16) && (p_beep->evt_handler != NULL))
   {
		  evt.evt_type = CHAR_AUTHENTICATION;
		  //sprintf(evt.authentication_word, "%16s", p_evt_write->data);
		  memcpy(evt.authentication_word, p_evt_write->data,16);
		  p_beep->evt_handler(p_beep, &evt);
    }
}

/**@brief Function for handling the Connect event.
 *
 * @param[in]   p_bas       Battery Service structure.
 * @param[in]   p_ble_evt   Event received from the BLE stack.
 */
static void on_connect(ble_beep_t * p_beep, ble_evt_t * p_ble_evt)
{
    p_beep->conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
}


/**@brief Function for handling the Disconnect event.
 *
 * @param[in]   p_bas       Battery Service structure.
 * @param[in]   p_ble_evt   Event received from the BLE stack.
 */
static void on_disconnect(ble_beep_t * p_beep, ble_evt_t * p_ble_evt)
{
    UNUSED_PARAMETER(p_ble_evt);
    p_beep->conn_handle = BLE_CONN_HANDLE_INVALID;
}

/**@brief Function for handling the Write event.
 *
 * @param[in]   p_beep       Immediate Alert Service structure.
 * @param[in]   p_ble_evt   Event received from the BLE stack.
 */
static void on_write(ble_beep_t * p_beep, ble_evt_t * p_ble_evt)
{
    ble_gatts_evt_write_t * p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
				
		//read event from mobile under the Beep Service
    if (p_evt_write->handle == p_beep->beep_verify_authentication_handles.value_handle)
    {
        on_beep_verify_authentication_write(p_beep, p_evt_write);
    }
		else if (p_evt_write->handle == p_beep->battery_level_handles.value_handle)
    {
        on_battery_level_write(p_beep, p_evt_write);
    } 
		else if (p_evt_write->handle == p_beep->beep_input_handles.value_handle)
    {
        on_beep_input_write(p_beep, p_evt_write);
    }
		else if (p_evt_write->handle == p_beep->beep_safetymode_handles.value_handle)
    {
        on_beep_safetymode_write(p_beep, p_evt_write);
    }

		
	if (p_beep->is_notification_supported)
    {
        ble_gatts_evt_write_t *p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
        if ((p_evt_write->handle == p_beep->beep_rssi_handles.cccd_handle) && (p_evt_write->len == 2))
        {
            // CCCD written, call application event handler
            if (p_beep->evt_handler != NULL)
            {
                ble_beep_evt_t evt;
                
                if (ble_srv_is_notification_enabled(p_evt_write->data))
                {
                    evt.evt_type = CHAR_RSSI_NOTIF_ON;
                }
                else
                {
                    evt.evt_type = CHAR_RSSI_NOTIF_OFF;
                }

                p_beep->evt_handler(p_beep, &evt);
            }
        }
				
			
        p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
        if ((p_evt_write->handle == p_beep->button_level_handles.cccd_handle) && (p_evt_write->len == 2))
        {
            // CCCD written, call application event handler
            if (p_beep->evt_handler != NULL)
            {
                ble_beep_evt_t evt;
                
                if (ble_srv_is_notification_enabled(p_evt_write->data))
                {
                    evt.evt_type = CHAR_BUTTON_NOTIF_ON;
                }
                else
                {
                    evt.evt_type = CHAR_BUTTON_NOTIF_OFF;
                }

                p_beep->evt_handler(p_beep, &evt);
            }
        }

				
    }
}


void ble_beep_on_ble_evt(ble_beep_t * p_beep, ble_evt_t * p_ble_evt)
{
    switch (p_ble_evt->header.evt_id)
    {
        case BLE_GAP_EVT_CONNECTED:
            on_connect(p_beep, p_ble_evt);
            break;
            
        case BLE_GAP_EVT_DISCONNECTED:
            on_disconnect(p_beep, p_ble_evt);
            break;
				
        case BLE_GATTS_EVT_WRITE:
            on_write(p_beep, p_ble_evt);
            break;
            
        default:
            break;
    }
}



/**@brief Function for adding TXPower Settings characteristics.
 *
 * @param[in]   p_settings        BLE Settings Service structure.
 * @param[in]   p_settings_init   Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
static uint32_t battery_level_char_add(ble_beep_t * p_bas, const ble_beep_init_t * p_bas_init)
{
    ble_gatts_char_md_t char_md;
    ble_gatts_attr_t    attr_char_value;
		ble_uuid_t  char_uuid;
    ble_gatts_attr_md_t attr_md;
   // uint32_t err_code;
    memset(&char_md, 0, sizeof(char_md));
    
    char_md.char_props.write 			= 1;
	char_md.char_props.read   			= 1;
    char_md.p_char_user_desc         	= NULL;
    char_md.p_char_pf                	= NULL;
    char_md.p_user_desc_md           	= NULL;
    char_md.p_cccd_md                	= NULL;
    char_md.p_sccd_md                	= NULL;
    
		char_uuid.type = BLE_UUID_TYPE_VENDOR_BEGIN + LAPA_VENDOR_UUID_INDEX;  // Position of the Vender specific ID base in m_base_uuid128.
    char_uuid.uuid = UUID_CHAR_BATTERY_VOLT;
   // err_code = sd_ble_uuid_vs_add(&m_base_uuid128, &char_uuid.type);
    sd_ble_uuid_vs_add(&m_base_uuid128, &char_uuid.type);
    memset(&attr_md, 0, sizeof(attr_md));

    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);

    attr_md.vloc       = BLE_GATTS_VLOC_STACK;
    attr_md.rd_auth    = 0;
    attr_md.wr_auth    = 0;
    attr_md.vlen       = 0;
    
    memset(&attr_char_value, 0, sizeof(attr_char_value));
    attr_char_value.p_uuid       = &char_uuid;
    attr_char_value.p_attr_md    = &attr_md;
    attr_char_value.init_len     = sizeof(uint16_t);
    attr_char_value.init_offs    = 0;
    attr_char_value.max_len      = sizeof(uint16_t);
	attr_char_value.p_value      = (uint8_t*)&p_bas_init->initial_batt_level;
    
    return sd_ble_gatts_characteristic_add(p_bas->service_handle,
                                           &char_md,
                                           &attr_char_value,
                                           &p_bas->battery_level_handles);
}





/**@brief Function for adding the Battery Level characteristic.
 *
 * @param[in]   p_bas        Battery Service structure.
 * @param[in]   p_bas_init   Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
static uint32_t beep_rssi_char_add(ble_beep_t * p_beep, const ble_beep_init_t * p_beep_init)
{
    uint32_t            err_code;
    ble_gatts_char_md_t char_md;
    ble_gatts_attr_md_t cccd_md;
    ble_gatts_attr_t    attr_char_value;
    ble_uuid_t          ble_uuid;
    ble_gatts_attr_md_t attr_md;
    uint8_t             initial_rssi_level;
    uint8_t             encoded_report_ref[BLE_SRV_ENCODED_REPORT_REF_LEN];
    uint8_t             init_len;
    
    // Add Battery Level characteristic
    if (p_beep->is_notification_supported)
    {
        memset(&cccd_md, 0, sizeof(cccd_md));
    
        // According to BAS_SPEC_V10, the read operation on cccd should be possible without
        // authentication.
        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
        cccd_md.write_perm = p_beep_init->rssi_char_attr_md.cccd_write_perm;
        cccd_md.vloc = BLE_GATTS_VLOC_STACK;
    }
    
    memset(&char_md, 0, sizeof(char_md));
    
    char_md.char_props.read   = 1;
    char_md.char_props.notify = (p_beep->is_notification_supported) ? 1 : 0;
    char_md.p_char_user_desc  = NULL;
    char_md.p_char_pf         = NULL;
    char_md.p_user_desc_md    = NULL;
    char_md.p_cccd_md         = (p_beep->is_notification_supported) ? &cccd_md : NULL;
    char_md.p_sccd_md         = NULL;
    
		ble_uuid.type = BLE_UUID_TYPE_VENDOR_BEGIN + LAPA_VENDOR_UUID_INDEX;  // Position of the Vender specific ID base in m_base_uuid128.
    ble_uuid.uuid = UUID_CHAR_RSSI;
    sd_ble_uuid_vs_add(&m_base_uuid128, &ble_uuid.type);
    
    memset(&attr_md, 0, sizeof(attr_md));

    attr_md.read_perm  = p_beep_init->rssi_char_attr_md.read_perm;
    attr_md.write_perm = p_beep_init->rssi_char_attr_md.write_perm;
    attr_md.vloc       = BLE_GATTS_VLOC_STACK;
    attr_md.rd_auth    = 0;
    attr_md.wr_auth    = 0;
    attr_md.vlen       = 0;
    
    initial_rssi_level = p_beep_init->initial_rssi;
    
    memset(&attr_char_value, 0, sizeof(attr_char_value));

    attr_char_value.p_uuid       = &ble_uuid;
    attr_char_value.p_attr_md    = &attr_md;
    attr_char_value.init_len     = sizeof(uint8_t);
    attr_char_value.init_offs    = 0;
    attr_char_value.max_len      = sizeof(uint8_t);
    attr_char_value.p_value      = &initial_rssi_level;
    
    err_code = sd_ble_gatts_characteristic_add(p_beep->service_handle, &char_md,
                                               &attr_char_value,
                                               &p_beep->beep_rssi_handles);
    if (err_code != NRF_SUCCESS)
    {
        return err_code;
    }
    
    if (p_beep_init->p_report_ref != NULL)
    {
        // Add Report Reference descriptor
        BLE_UUID_BLE_ASSIGN(ble_uuid, BLE_UUID_REPORT_REF_DESCR);
        
        memset(&attr_md, 0, sizeof(attr_md));

        attr_md.read_perm = p_beep_init->rssi_report_read_perm;
        BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(&attr_md.write_perm);

        attr_md.vloc       = BLE_GATTS_VLOC_STACK;
        attr_md.rd_auth    = 0;
        attr_md.wr_auth    = 0;
        attr_md.vlen       = 0;
        
        init_len = ble_srv_report_ref_encode(encoded_report_ref, p_beep_init->p_report_ref);
        
        memset(&attr_char_value, 0, sizeof(attr_char_value));

        attr_char_value.p_uuid       = &ble_uuid;
        attr_char_value.p_attr_md    = &attr_md;
        attr_char_value.init_len     = init_len;
        attr_char_value.init_offs    = 0;
        attr_char_value.max_len      = attr_char_value.init_len;
        attr_char_value.p_value      = encoded_report_ref;
        
        err_code = sd_ble_gatts_descriptor_add(p_beep->beep_rssi_handles.value_handle,
                                               &attr_char_value,
                                               &p_beep->report_ref_handle);
        if (err_code != NRF_SUCCESS)
        {
            return err_code;
        }
    }
    else
    {
        p_beep->report_ref_handle = BLE_GATT_HANDLE_INVALID;
    }
    
    return NRF_SUCCESS;
}


///
/**@brief Function for adding BUTTON Settings characteristics.
 *
 * @param[in]   p_settings        BLE Settings Service structure.
 * @param[in]   p_settings_init   Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
static uint32_t button_level_char_add(ble_beep_t * p_beep, const ble_beep_init_t * p_beep_init)
{
    uint32_t            err_code;
    ble_gatts_char_md_t char_md;
    ble_gatts_attr_md_t cccd_md;
    ble_gatts_attr_t    attr_char_value;
    ble_uuid_t          ble_uuid;
    ble_gatts_attr_md_t attr_md;
	
    uint8_t             initial_button_level;
    uint8_t             encoded_report_ref[BLE_SRV_ENCODED_REPORT_REF_LEN];
    uint8_t             init_len;
    
    // Add Battery Level characteristic
    if (p_beep->is_notification_supported)
    {
        memset(&cccd_md, 0, sizeof(cccd_md));
    
        // According to BAS_SPEC_V10, the read operation on cccd should be possible without
        // authentication.
        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
        cccd_md.write_perm 	= p_beep_init->button_char_attr_md.cccd_write_perm;
        cccd_md.vloc 				= BLE_GATTS_VLOC_STACK;

			}
    
    memset(&char_md, 0, sizeof(char_md));
    
    char_md.char_props.read   = 1;
    char_md.char_props.notify = (p_beep->is_notification_supported) ? 1 : 0;
    char_md.p_char_user_desc  = NULL;
    char_md.p_char_pf         = NULL;
    char_md.p_user_desc_md    = NULL;
//char_md.p_cccd_md         = (p_beep->is_notification_supported) ? &cccd_md : NULL;
    char_md.p_sccd_md         = NULL;
   
		ble_uuid.type = BLE_UUID_TYPE_VENDOR_BEGIN + LAPA_VENDOR_UUID_INDEX;  // Position of the Vender specific ID base in m_base_uuid128.
    ble_uuid.uuid = UUID_CHAR_BUTTON;
    sd_ble_uuid_vs_add(&m_base_uuid128, &ble_uuid.type);
    
    memset(&attr_md, 0, sizeof(attr_md));

    attr_md.read_perm  = p_beep_init->button_char_attr_md.read_perm;
    attr_md.write_perm = p_beep_init->button_char_attr_md.write_perm;
    attr_md.vloc       = BLE_GATTS_VLOC_STACK;
    attr_md.rd_auth    = 0;
    attr_md.wr_auth    = 0;
    attr_md.vlen       = 0;
    
    initial_button_level = p_beep_init->initial_button_level;
    
    memset(&attr_char_value, 0, sizeof(attr_char_value));

    attr_char_value.p_uuid       = &ble_uuid;
    attr_char_value.p_attr_md    = &attr_md;
    attr_char_value.init_len     = sizeof(uint8_t);
    attr_char_value.init_offs    = 0;
    attr_char_value.max_len      = sizeof(uint8_t);
    attr_char_value.p_value      = &initial_button_level;
    
    err_code = sd_ble_gatts_characteristic_add(p_beep->service_handle, &char_md,&attr_char_value,&p_beep->button_level_handles);
    if (err_code != NRF_SUCCESS)
    {
        return err_code;
    }
    
    if (p_beep_init->p_report_ref != NULL)
    {
        // Add Report Reference descriptor
        BLE_UUID_BLE_ASSIGN(ble_uuid, BLE_UUID_REPORT_REF_DESCR);
        
        memset(&attr_md, 0, sizeof(attr_md));

        attr_md.read_perm = p_beep_init->button_report_read_perm;
        BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(&attr_md.write_perm);

        attr_md.vloc       = BLE_GATTS_VLOC_STACK;
        attr_md.rd_auth    = 0;
        attr_md.wr_auth    = 0;
        attr_md.vlen       = 0;
        
        init_len = ble_srv_report_ref_encode(encoded_report_ref, p_beep_init->p_report_ref);
        
        memset(&attr_char_value, 0, sizeof(attr_char_value));

        attr_char_value.p_uuid       = &ble_uuid;
        attr_char_value.p_attr_md    = &attr_md;
        attr_char_value.init_len     = init_len;
        attr_char_value.init_offs    = 0;
        attr_char_value.max_len      = attr_char_value.init_len;
        attr_char_value.p_value      = encoded_report_ref;
        
        err_code = sd_ble_gatts_descriptor_add(p_beep->button_level_handles.value_handle,
                                               &attr_char_value,
                                               &p_beep->report_ref_handle);
        if (err_code != NRF_SUCCESS)
        {
            return err_code;
        }
    }
    else
    {
        p_beep->report_ref_handle = BLE_GATT_HANDLE_INVALID;
    }
    
    return NRF_SUCCESS;
}




////
/**@brief Function for adding Beep characteristic.
 *
 * @param[in]   p_beep        Beep Service structure.
 * @param[in]   p_beep_init   Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
static uint32_t beep_verify_authentication_char_add(ble_beep_t * p_beep)
{
    ble_gatts_char_md_t char_md;
    ble_gatts_attr_t    attr_char_value;
    //ble_uuid_t          ble_uuid;
    ble_gatts_attr_md_t attr_md;
   // uint32_t err_code;
    
    memset(&char_md, 0, sizeof(char_md));
    
    char_md.char_props.write = 1;
    char_md.p_char_user_desc         = NULL;
    char_md.p_char_pf                = NULL;
    char_md.p_user_desc_md           = NULL;
    char_md.p_cccd_md                = NULL;
    char_md.p_sccd_md                = NULL;
    
	ble_uuid_t  char_uuid;
	char_uuid.type = BLE_UUID_TYPE_VENDOR_BEGIN + LAPA_VENDOR_UUID_INDEX;  // Position of the Vender specific ID base in m_base_uuid128.
    char_uuid.uuid = UUID_CHAR_AUTHENTICATION;
    //err_code = sd_ble_uuid_vs_add(&m_base_uuid128, &char_uuid.type);
    sd_ble_uuid_vs_add(&m_base_uuid128, &char_uuid.type);
    memset(&attr_md, 0, sizeof(attr_md));

    BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(&attr_md.read_perm);
    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);

    attr_md.vloc       = BLE_GATTS_VLOC_STACK;
    attr_md.rd_auth    = 0;
    attr_md.wr_auth    = 0;
    attr_md.vlen       = 0;
    
    memset(&attr_char_value, 0, sizeof(attr_char_value));
    
    attr_char_value.p_uuid       = &char_uuid;
    attr_char_value.p_attr_md    = &attr_md;
    attr_char_value.init_len     = 16;
    attr_char_value.init_offs    = 0;
    attr_char_value.max_len      = 16;
    //attr_char_value.p_value			 = NULL;
		
    return sd_ble_gatts_characteristic_add(p_beep->service_handle,
                                           &char_md,
                                           &attr_char_value,
                                           &p_beep->beep_verify_authentication_handles);
}







static uint32_t beep_lapa_input_char_add(ble_beep_t * p_beep)
{
    ble_gatts_char_md_t char_md;
    ble_gatts_attr_t    attr_char_value;
    ble_gatts_attr_md_t attr_md;

    memset(&char_md, 0, sizeof(char_md));
    char_md.char_props.write = 1;
    char_md.p_char_user_desc         = NULL;
    char_md.p_char_pf                = NULL;
    char_md.p_user_desc_md           = NULL;
    char_md.p_cccd_md                = NULL;
    char_md.p_sccd_md                = NULL;

	ble_uuid_t  char_uuid;
	char_uuid.type = BLE_UUID_TYPE_VENDOR_BEGIN + LAPA_VENDOR_UUID_INDEX;  // Position of the Vender specific ID base in m_base_uuid128.
    char_uuid.uuid = UUID_CHAR_INPUT;

    sd_ble_uuid_vs_add(&m_base_uuid128, &char_uuid.type);
    memset(&attr_md, 0, sizeof(attr_md));

    BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(&attr_md.read_perm);
    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);

    attr_md.vloc       = BLE_GATTS_VLOC_STACK;
    attr_md.rd_auth    = 0;
    attr_md.wr_auth    = 0;
    attr_md.vlen       = 0;

    memset(&attr_char_value, 0, sizeof(attr_char_value));

    attr_char_value.p_uuid       = &char_uuid;
    attr_char_value.p_attr_md    = &attr_md;
    attr_char_value.init_len     = sizeof(uint16_t);
    attr_char_value.init_offs    = 0;
    attr_char_value.max_len      = 3;//sizeof(uint16_t);

    return sd_ble_gatts_characteristic_add(p_beep->service_handle,&char_md,&attr_char_value,&p_beep->beep_input_handles);
}


static uint32_t beep_lapa_safetymode_char_add(ble_beep_t * p_beep)
{
    ble_gatts_char_md_t char_md;
    ble_gatts_attr_t    attr_char_value;
    ble_gatts_attr_md_t attr_md;
    memset(&char_md, 0, sizeof(char_md));

    char_md.char_props.write = 1;
    char_md.p_char_user_desc         = NULL;
    char_md.p_char_pf                = NULL;
    char_md.p_user_desc_md           = NULL;
    char_md.p_cccd_md                = NULL;
    char_md.p_sccd_md                = NULL;

	ble_uuid_t  char_uuid;
	char_uuid.type = BLE_UUID_TYPE_VENDOR_BEGIN + LAPA_VENDOR_UUID_INDEX;  // Position of the Vender specific ID base in m_base_uuid128.
    char_uuid.uuid = UUID_CHAR_SAFETYMODE;
    sd_ble_uuid_vs_add(&m_base_uuid128, &char_uuid.type);
    memset(&attr_md, 0, sizeof(attr_md));

    BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(&attr_md.read_perm);
    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);

    attr_md.vloc       = BLE_GATTS_VLOC_STACK;
    attr_md.rd_auth    = 0;
    attr_md.wr_auth    = 0;
    attr_md.vlen       = 0;

    memset(&attr_char_value, 0, sizeof(attr_char_value));

    attr_char_value.p_uuid       = &char_uuid;
    attr_char_value.p_attr_md    = &attr_md;
    attr_char_value.init_len     = sizeof(uint16_t);
    attr_char_value.init_offs    = 0;
    attr_char_value.max_len      = 2;//sizeof(uint16_t);

    return sd_ble_gatts_characteristic_add(p_beep->service_handle,
                                           &char_md,
                                           &attr_char_value,
                                           &p_beep->beep_safetymode_handles);
}



uint32_t ble_beep_init(ble_beep_t * p_beep, const ble_beep_init_t * p_beep_init)
{
    uint32_t   err_code;

    // Initialize service structure
    if (p_beep_init->evt_handler == NULL)
    {
        return NRF_ERROR_INVALID_PARAM;
    }
    p_beep->evt_handler 				= p_beep_init->evt_handler;
    p_beep->conn_handle               	= BLE_CONN_HANDLE_INVALID;
    p_beep->is_notification_supported 	= p_beep_init->support_notification;
    p_beep->rssi_last   				= 0;
	p_beep->button_last 				= 0;
		
    // Add service
		ble_uuid_t  service_uuid;
		service_uuid.type = BLE_UUID_TYPE_VENDOR_BEGIN + LAPA_VENDOR_UUID_INDEX;  // Position of the Vender specific ID base in m_base_uuid128.
    service_uuid.uuid = UUID_SERV_BEEP;
    err_code = sd_ble_uuid_vs_add(&m_base_uuid128, &service_uuid.type);
		
    err_code = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY, &service_uuid, &p_beep->service_handle);
    if (err_code != NRF_SUCCESS)
    {
        return err_code;
    }



		err_code = beep_verify_authentication_char_add(p_beep);
    if (err_code != NRF_SUCCESS)
    {
        return err_code;
    }

		err_code = beep_rssi_char_add(p_beep, p_beep_init);
    if (err_code != NRF_SUCCESS)
    {
        return err_code;
    }
		// Add button level characteristic
    err_code = button_level_char_add(p_beep, p_beep_init);
		if (err_code != NRF_SUCCESS)
    {
        return err_code;
    }
		
    // Add battery level characteristic
    err_code = battery_level_char_add(p_beep, p_beep_init);
		if (err_code != NRF_SUCCESS)
    {
        return err_code;
    }

    err_code = beep_lapa_input_char_add(p_beep);
    if (err_code != NRF_SUCCESS)
    {
        return err_code;
    }

    err_code = beep_lapa_safetymode_char_add(p_beep);
    if (err_code != NRF_SUCCESS)
    {
        return err_code;
    }
		
	return NRF_SUCCESS;
}



uint32_t ble_bas_battery_level_update(ble_beep_t * p_bas, uint16_t battery_level)
{
	uint32_t err_code = NRF_SUCCESS;
	ble_gatts_value_t gatts_value;

    // Initialize value struct.
    memset(&gatts_value, 0, sizeof(gatts_value));

    gatts_value.len     = sizeof(uint16_t);
    gatts_value.offset  = 0;
    gatts_value.p_value = (uint8_t*)&battery_level;	
    // Update database
    err_code= sd_ble_gatts_value_set(p_bas->conn_handle,p_bas->battery_level_handles.value_handle,&gatts_value);
        if (err_code != NRF_SUCCESS)
        {
            return err_code;
        }
        else
        {
            err_code = NRF_ERROR_INVALID_STATE;
        }

    return err_code;
}



uint32_t ble_beep_lapa_state_set(ble_beep_t * p_beep, uint8_t state)
{
    ble_gatts_value_t gatts_value;

    // Initialize value struct.
    memset(&gatts_value, 0, sizeof(gatts_value));

    gatts_value.len     = sizeof(uint8_t);
    gatts_value.offset  = 0;
    gatts_value.p_value = (uint8_t*)&state;	
    // Update database
    return sd_ble_gatts_value_set(p_beep->conn_handle,
                                  p_beep->beep_lapa_state_handles.value_handle,
                                  &gatts_value);
    

}



uint32_t ble_beep_lapa_poff_set(ble_beep_t * p_beep, uint8_t poff)
{
    ble_gatts_value_t gatts_value;

    // Initialize value struct.
    memset(&gatts_value, 0, sizeof(gatts_value));

    gatts_value.len     = sizeof(uint8_t);
    gatts_value.offset  = 0;
    gatts_value.p_value = (uint8_t*)&poff;
    // Update database
    return sd_ble_gatts_value_set(p_beep->conn_handle,
                                  p_beep->beep_lapa_poff_handles.value_handle,
                                  &gatts_value);

}

uint32_t ble_rssi_update(ble_beep_t * p_beep, int8_t rssi)
{
    uint32_t err_code = NRF_SUCCESS;

    if (p_beep->conn_handle != BLE_CONN_HANDLE_INVALID)

   // if (rssi != p_beep->rssi_last)
    {
        uint16_t len = sizeof(int8_t);
        
        // Save new rssi value
        p_beep->rssi_last = rssi;
 
		ble_gatts_value_t gatts_value;

		// Initialize value struct.
		memset(&gatts_value, 0, sizeof(gatts_value));

		gatts_value.len     = sizeof(uint8_t);
		gatts_value.offset  = 0;
		gatts_value.p_value = (uint8_t*)&rssi;

		// Update database
		err_code = sd_ble_gatts_value_set(p_beep->conn_handle,p_beep->beep_rssi_handles.value_handle,&gatts_value);

		if (err_code != NRF_SUCCESS)
            return err_code;
        // Send value if connected and notifying
        if ((p_beep->conn_handle != BLE_CONN_HANDLE_INVALID) && p_beep->is_notification_supported)
        {
            ble_gatts_hvx_params_t hvx_params;
            
            memset(&hvx_params, 0, sizeof(hvx_params));
            len = sizeof(int8_t);
            
            hvx_params.handle   = p_beep->beep_rssi_handles.value_handle;
            hvx_params.type     = BLE_GATT_HVX_NOTIFICATION;//BLE_GATT_HVX_INDICATION; //
            hvx_params.offset   = 0;
            hvx_params.p_len    = &len;
            hvx_params.p_data   = (uint8_t*)&rssi;
            
            err_code = sd_ble_gatts_hvx(p_beep->conn_handle, &hvx_params);
        }
        else
        {
            err_code = NRF_ERROR_INVALID_STATE;
        }
    }

    return err_code;
}



uint32_t ble_button_level_update(ble_beep_t * p_beep, uint8_t button_level)
{
    uint32_t err_code = NRF_SUCCESS;

    if (p_beep->conn_handle != BLE_CONN_HANDLE_INVALID)
   // if (button_level != p_beep->button_last)
    {
        uint16_t len = sizeof(int8_t);
    
        // Save new rssi value
        p_beep->button_last = button_level;
 
        ble_gatts_value_t gatts_value;

		// Initialize value struct.
		memset(&gatts_value, 0, sizeof(gatts_value));

		gatts_value.len     = sizeof(uint8_t);
		gatts_value.offset  = 0;
		gatts_value.p_value = (uint8_t*)&button_level;
		// Update database
		err_code= sd_ble_gatts_value_set(p_beep->conn_handle, p_beep->button_level_handles.value_handle,&gatts_value);
       if (err_code != NRF_SUCCESS)
        {
            return err_code;
        }

        // Send value if connected and notifying
        if ((p_beep->conn_handle != BLE_CONN_HANDLE_INVALID) && p_beep->is_notification_supported)
        {
            ble_gatts_hvx_params_t hvx_params;
            memset(&hvx_params, 0, sizeof(hvx_params));
            len = sizeof(int8_t);
            
            hvx_params.handle   = p_beep->button_level_handles.value_handle;
            hvx_params.type     = BLE_GATT_HVX_NOTIFICATION;
            hvx_params.offset   = 0;
            hvx_params.p_len    = &len;
            hvx_params.p_data   = (uint8_t*)&button_level;
            
            err_code = sd_ble_gatts_hvx(p_beep->conn_handle, &hvx_params);

        }
        else
        {

            err_code = NRF_ERROR_INVALID_STATE;
        }
    }

    return err_code;
}




